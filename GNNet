class GNNet(MessagePassing):
  def __init__(self, in_channels, hidden_channels, out_channels):
    super(GNNPENet, self).__init__(aggr = None, flow = 'source_to_target')
    self.lin = nn.Sequential(
      Linear(in_channels, hidden_channels, bias=True),
      nn.GELU(),
      nn.Dropout(p=0.0, inplace=False),
    )
    self.bias = Parameter(torch.Tensor(out_channels))
    self.aggr = aggr.LSTMAggregation(hidden_channels, hidden_channels, num_layers = 1, dropout = 0.5)
    self.out = Linear(hidden_channels * 2, out_channels)
    self.reset_parameters()

  def reset_parameters(self):
    self.lin[0].reset_parameters()
    self.bias.data.zero_()

  def forward(self, x, edge_index):
    x = self.lin(x)
    x = self.propagate(x = x, edge_index = edge_index)
    x = x + self.bias
    return x

  def aggregate(self, x_j, edge_index):
    aggr_out = self.aggr(x_j, edge_index[1])
    return aggr_out

  def update(self, aggr_out, x):
     aggr_out = torch.cat((aggr_out, x), dim = 1)
     aggr_out = self.out(aggr_out)
     return aggr_out
